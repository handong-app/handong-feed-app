meta {
  name: ReadFeed
  type: http
  seq: 1
}

get {
  url: http://localhost:{{PORT}}/api/external/feed?limit=10000&start=1744458456&end=1744516566&isFilterNew=0&onlyUnassignedFeeds=1
  body: none
  auth: inherit
}

params:query {
  limit: 10000
  start: 1744458456
  end: 1744516566
  isFilterNew: 0
  onlyUnassignedFeeds: 1
}

tests {
  test("each item should exactly match the expected external feed structure", function () {
    const data = res.getBody();
  
    const expectedShape = {
      subjectId: 'number',
      id: 'string',
      sentAt: 'number',
      message: 'string',
      files: { type: 'array', nullable: true },
      like: 'boolean',
      messageCount: 'number',
      tags: { type: 'array', nullable: true }
    };
  
  
    function validateStructure(obj, shape, path = '') {
      const actualKeys = Object.keys(obj).sort();
      const expectedKeys = Object.keys(shape).sort();
      expect(actualKeys, `Keys at '${path || 'root'}' do not match`).to.eql(expectedKeys);
  
      for (const [key, typeOrShape] of Object.entries(shape)) {
        const fullPath = path ? `${path}.${key}` : key;
        const value = obj[key];
  
        // Nullable 필드 처리
        if (typeof typeOrShape === 'object' && typeOrShape.nullable) {
          if (value === null) continue; // null 허용됨
          expect(value, `Field '${fullPath}' should be a ${typeOrShape.type} or null`).to.be.a(typeOrShape.type);
        }
  
        // 일반 타입 문자열
        else if (typeof typeOrShape === 'string') {
          expect(value, `Field '${fullPath}' should be a ${typeOrShape}`).to.be.a(typeOrShape);
        }
  
        // 중첩된 객체 재귀
        else {
          expect(value, `Field '${fullPath}' should be an object`).to.be.a('object');
          validateStructure(value, typeOrShape, fullPath);
        }
      }
    }
  
    expect(data).to.be.a('array');
  
    data.forEach((item, index) => {
      validateStructure(item, expectedShape, `item[${index}]`);
    });
  });
  
}

docs {
  ## ✅ 파라미터 설명 테이블
  
  | 파라미터 이름       | 타입        | 설명                                         | 예시 값         | 없을 경우 기본 처리            |
  | ------------- | --------- | ------------------------------------------ | ------------ | ---------------------- |
  | `start`       | `Long`    | 조회 시작 시간 / 초 (포함)                          | `1742027579` | 조건에 포함되지 않음            |
  | `end`         | `Long`    | 조회 종료 시간 / 초 (포함)                          | `1742027579` | 조건에 포함되지 않음            |
  | `isFilterNew` | `boolean` | 새로운 피드만 반환                                 | "1"          | false 처리되어 조건에 포함되지 않음 |
  | `onlyUnassignedFeeds` | `boolean` | 태그가 할당되지 않은 피드만 반환               | "1"          | false 처리되어 조건에 포함되지 않음 |
  | `limit`       | `Integer` | 결과 최대 개수 제한 (없거나 200 이상이면 자동으로 `200`으로 제한) | `100`, 없음    | 없으면 최대값인 200으로 자동 설정됨  |
  
}
